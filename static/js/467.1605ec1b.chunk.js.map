{"version":3,"file":"static/js/467.1605ec1b.chunk.js","mappings":"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","sources":["API/api-servises.jsx","Pages/MoviePage.jsx","components/MovieList/MovieListItem/MovieListItem.styled.js","components/MovieList/MovieListItem/MovieListItem.jsx","components/MovieList/MovieList.jsx","components/MovieList/MovieList.styled.js"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '250f014fd6a936550e378176122f5d39';\n\nexport const searchMovies = async (query, page) => {\n  const response = await axios.get(\n    `/search/movie?api_key=${API_KEY}&language=en-US&page=${page}&query=${query}&include_adult=true`\n  );\n  return response.data.results;\n};\n\nexport const getTrending = async page => {\n  const response = await axios.get(\n    `/trending/all/week?api_key=${API_KEY}&page=${page}`\n  );\n  return response.data.results;\n};\n\nexport const getDetails = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getCast = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\nexport const getReviews = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { BsSearch } from 'react-icons/bs';\nimport Notiflix from 'notiflix';\nimport { Form, Input, Button } from 'components/Header/Header.styled';\nimport { searchMovies } from 'API/api-servises';\nimport Loader from 'components/Loader';\nimport { MovieList } from 'components/MovieList/MovieList';\n\nconst MoviePage = () => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [movies, setMovies] = useState(null);\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const handleChange = element => {\n    setSearchQuery(element.currentTarget.value);\n  };\n  const onFormSubmit = element => {\n    element.preventDefault();\n\n    const newQuery = element.target.elements.query.value.toLowerCase();\n    if (newQuery.trim() === '') {\n      Notiflix.Notify.failure(\"Please, enter correct movie's name\");\n      return;\n    }\n    setSearchParams({ query: newQuery });\n  };\n\n  useEffect(() => {\n    if (searchParams.get('query') !== null) {\n      const newQuery = searchParams.get('query');\n      setLoading(true);\n      searchMovies(newQuery)\n        .then(results => {\n          results.length !== 0\n            ? setMovies([...results])\n            : Notiflix.Notify.failure(\n                \"Sorry, we didn't find any movies matching your search. Please, try again\"\n              );\n        })\n        .catch(error => setError(error.message))\n        .finally(() => setLoading(false));\n      setSearchQuery(searchParams.get('query'));\n    }\n  }, [searchParams]);\n\n  return (\n    <>\n      <Form onSubmit={onFormSubmit}>\n        <Input\n          type=\"text\"\n          name=\"query\"\n          value={searchQuery}\n          onChange={handleChange}\n          autoFocus={true}\n        />\n        <Button type=\"submit\">\n          <BsSearch size={30} color={'white'} />\n        </Button>\n      </Form>\n      {loading && <Loader />}\n      {movies && <MovieList movies={movies} />}\n      {error && <p>Something went wrong, please try again later!</p>}\n    </>\n  );\n};\n\nexport default MoviePage;\n","import styled from \"@emotion/styled\";\n\nexport const Item = styled.div`\n  width: 300px;\n  flex-basis: calc(100% / 4 - 30px);\n  margin-top: 30px;\n  margin-left: 30px;\n  border-radius: 5px;\n  overflow: hidden;\n  background-color: white;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n  cursor: pointer;\n  transform: scale(1);\n  transition: all 250ms linear;\n  &:hover{\n    transform: scale(1.03);\n  transition: all 250ms linear;\n  }\n}\n`;\n\nexport const Img = styled.img`\n  width: 100%;\n  height: 400px;\n}\n`;\n\nexport const Wrap = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  p{\n    font-size: 18px;\n    font-weight: 500;\n    padding: 10px 20px;\n    color: #000;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    overflow: hidden;\n  }\n}\n`;\n\n","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Item, Img, Wrap } from './MovieListItem.styled';\n\nexport const MovieListItem = ({ movie }) => {\n  const { poster_path, name, title, id } = movie;\n  const location = useLocation();\n\n  return (\n    <Link\n      to={`/movies/${id}`}\n      state={{\n        from: location.pathname + location.search,\n      }}\n    >\n      <Item>\n        <li>\n          <Img\n            src={\n              poster_path\n                ? `https://image.tmdb.org/t/p/w300/${poster_path}`\n                : 'https://upload.wikimedia.org/wikipedia/commons/thumb/a/ac/No_image_available.svg/300px-No_image_available.svg.png'\n            }\n            alt={title}\n          />\n        </li>\n        <Wrap>\n          <p>{title ?? name}</p>\n        </Wrap>\n      </Item>\n    </Link>\n  );\n};\n\nMovieListItem.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    poster_path: PropTypes.string,\n    name: PropTypes.string,\n    title: PropTypes.string,\n  }).isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { MLContainer, List } from './MovieList.styled';\nimport { MovieListItem } from 'components/MovieList/MovieListItem/MovieListItem';\n\nexport const MovieList = ({ movies }) => {\n  return (\n    <MLContainer>\n      <List>\n        {movies.map(movie => (\n          <MovieListItem key={movie.id} movie={movie} />\n        ))}\n      </List>\n    </MLContainer>\n  );\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n    })\n  ).isRequired,\n};\n","import styled from \"@emotion/styled\";\n\nexport const MLContainer = styled.div`\n  max-width: 1400px;\n  margin: 0 auto;\n`;\n\nexport const List = styled.ul`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: -30px;\n  margin-left: -30px;\n  flex-wrap: wrap;\n  padding-top: 50px;\n  padding-bottom: 50px;\n`;\n\nexport const Title = styled.h2`\n  display:flex;\n  font-size: 48px;\n  margin-top: 50px;\n  align-items: center;\n  justify-content: center;\n`;\n\n"],"names":["axios","API_KEY","searchMovies","query","page","response","data","results","getTrending","getDetails","movieId","getCast","cast","getReviews","useState","searchQuery","setSearchQuery","movies","setMovies","error","setError","loading","setLoading","useSearchParams","searchParams","setSearchParams","useEffect","get","newQuery","then","length","Notiflix","catch","message","finally","onSubmit","element","preventDefault","target","elements","value","toLowerCase","trim","type","name","onChange","currentTarget","autoFocus","size","color","Item","styled","Img","Wrap","MovieListItem","movie","poster_path","title","id","location","useLocation","to","state","from","pathname","search","src","alt","MovieList","map","MLContainer","List","Title"],"sourceRoot":""}