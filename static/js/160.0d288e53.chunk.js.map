{"version":3,"file":"static/js/160.0d288e53.chunk.js","mappings":"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","sources":["API/api-servises.jsx","components/MovieDetails/MovieDetails.styled.js","components/MovieDetails/MovieDetails.jsx","components/Pages/MovieDetailsPage.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '250f014fd6a936550e378176122f5d39';\n\nexport const searchMovies = async (query, page) => {\n  const response = await axios.get(\n    `/search/movie?api_key=${API_KEY}&language=en-US&page=${page}&query=${query}&include_adult=true`\n  );\n  return response.data.results;\n};\n\nexport const getTrending = async page => {\n  const response = await axios.get(\n    `/trending/all/week?api_key=${API_KEY}&page=${page}`\n  );\n  return response.data.results;\n};\n\nexport const getDetails = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getCast = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\nexport const getReviews = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n","import styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\n\nexport const MDContainer = styled.div`\n  display: flex;\n  align-items: flex-start;\n  width: 1200px;\n  margin: 0 auto;\n  padding-top: 50px;\n  padding-bottom: 50px;\n}\n`;\n\nexport const Img = styled.img`\n  display: flex;\n  align-items: flex-start;\n  margin: 0 auto;\n  padding-bottom: 50px;\n}\n`;\n\nexport const Info = styled.div`\n  margin-left: 100px;\n  h2{\n    color: green;\n    margin-bottom: 10px;\n  }\n  h3{\n    padding-bottom: 10px ;\n  }\n  p{\n    margin-bottom: 20px;\n  }\n}\n`;\n\nexport const MoreInformation = styled.div`\n  background-color: rgb(58, 57, 56);\n  display: flex;\n  padding-top: 25px;\n  padding-bottom: 25px;\n  justify-content: center;\n}\n`;\n\nexport const Link = styled(NavLink)`\n  margin-left: 10px;\n  font-size: 18px;\n  font-weight: 700;\n  color: coral;\n  text-decoration: none;\n  cursor: pointer;\n  transition: all 250ms linear;\n}\n`;\n\nexport const Button = styled.button`\n  display: block;\n  width: 220px;\n  height: 50px;\n  margin-top: 20px;\n  margin-left: 60px;\n  color: coral;\n  font-size: 18px;\n  font-weight: 700;\n  border: none;\n  border-radius: 5px;\n  background-color: rgb(58, 57, 56);\n  outline: none;\n  cursor: pointer;\n  transition: all 250ms linear;\n  &:hover{\n  color: yellow;\n  transition: all 250ms linear;\n  }\n`;\n","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport {\n  MDContainer,\n  Img,\n  Info,\n  MoreInformation,\n  Link,\n} from './MovieDetails.styled';\n\nexport const MovieDetails = ({ movie }) => {\n  const {\n    original_title,\n    genres,\n    overview,\n    poster_path,\n    release_date,\n    vote_average,\n  } = movie;\n\n  const genresAll = genres.map(genre => genre.name).join(', ');\n  const location = useLocation();\n\n  return (\n    <>\n      <MDContainer>\n        <Img\n          src={\n            poster_path\n              ? `https://image.tmdb.org/t/p/w300/${poster_path}`\n              : 'https://upload.wikimedia.org/wikipedia/commons/thumb/a/ac/No_image_available.svg/300px-No_image_available.svg.png'\n          }\n          alt={original_title}\n        />\n        <Info>\n          <h1>{original_title}</h1>\n          <h2> ({release_date})</h2>\n          <p>User Score: {vote_average}</p>\n          <h3>Overview</h3>\n          <p>{overview}</p>\n          <h3>Genres</h3>\n          <p>{genresAll}</p>\n        </Info>\n      </MDContainer>\n      <MoreInformation>\n        <Link to=\"cast\" state={location.state}>\n          Cast\n        </Link>\n        <Link to=\"reviews\" state={location.state}>\n          Reviews\n        </Link>\n      </MoreInformation>\n    </>\n  );\n};\n\nMovieDetails.propTypes = {\n  movie: PropTypes.shape({\n    original_title: PropTypes.string.isRequired,\n    genres: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string.isRequired,\n      })\n    ).isRequired,\n    overview: PropTypes.string.isRequired,\n    poster_path: PropTypes.string,\n    release_date: PropTypes.string.isRequired,\n    vote_average: PropTypes.number.isRequired,\n  }).isRequired,\n};\n","import { useState, useEffect, lazy } from 'react';\nimport {\n  useParams,\n  useNavigate,\n  useLocation,\n  Routes,\n  Route,\n} from 'react-router-dom';\n\nimport { getDetails } from 'API/api-servises';\nimport Loader from 'components/Loader';\nimport { MovieDetails } from 'components/MovieDetails';\nimport { Button } from '../MovieDetails/MovieDetails.styled';\n\nconst CastPage = lazy(() => import('./CastPage'));\nconst ReviewsPage = lazy(() => import('./ReviewsPage'));\n\nconst MovieDetailsPage = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState(null);\n  const [error, setError] = useState('');\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const onGoBack = () => {\n    navigate(location?.state?.from ?? '/');\n  };\n\n  useEffect(() => {\n    getDetails(movieId)\n      .then(results => setMovie(results))\n      .catch(error => setError(error.message));\n  }, [movieId]);\n\n  return (\n    <>\n      <Button type=\"button\" onClick={onGoBack}>\n        To Movies\n      </Button>\n      {!movie && <Loader />}\n      {movie && <MovieDetails movie={movie} />}\n      {error && <p>Something went wrong, please try again later!</p>}\n      <Routes>\n        <Route path=\"cast\" element={<CastPage />} />\n        <Route path=\"reviews\" element={<ReviewsPage />} />\n      </Routes>\n    </>\n  );\n};\n\nexport default MovieDetailsPage;\n"],"names":["axios","API_KEY","searchMovies","query","page","response","data","results","getTrending","getDetails","movieId","getCast","cast","getReviews","MDContainer","styled","Img","Info","MoreInformation","Link","NavLink","Button","MovieDetails","movie","original_title","genres","overview","poster_path","release_date","vote_average","genresAll","map","genre","name","join","location","useLocation","src","alt","to","state","CastPage","lazy","ReviewsPage","useParams","useState","setMovie","error","setError","navigate","useNavigate","useEffect","then","catch","message","type","onClick","from","Loader","path","element"],"sourceRoot":""}